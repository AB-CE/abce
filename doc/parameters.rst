simulation_parameters and agent_parameters
==========================================

In the file `simulation_parameters.csv`, parameters
that either govern the simulation or are accessible to all agents, can be specified.
The file `agent_parameters.csv` is used to create agents from a file with
:meth:`abce.Simulation.build_agents_from_file`. The agents created can access
the agent_parameters for their agent group. For every simulation all agents are
specified in the same file. Even though, they are build separately.

We will first expose the compulsory columns in simulation_parameters.csv
and agent_parameters respectively and then show how agents can access
the parameters.

There are a few conventions:
- The files must be tab separated
- First row has column headings
- All lower case
- `num_` indicates number of


simulation_parameters.csv
-------------------------

    compulsory fields:
        name:
        	name of the simulation
        num_rounds:
        	number of rounds of this simulation
        trade_logging:
            Can be set to `group` (fast) or `individual` (slow, default) or `off`)
    optional fields:
        random_seed:
        	random seed 0 or missing chooses a random_seed at random

agent_parameters.csv
--------------------
This table it self does not create the agents. Rather :meth:`abce.Simulation.build_agents_from_file`
creates the agent. build_agents_from_file, searches for the line(s) with the agent_class,
specified. It then creates the number of agents of this class, specified in the number
column.
There can be several lines with the same agent class, in this case for each line the the number
of agents are created. These agents get the `agent_parameters` specified in the particular line.

    compulsory fields:
        agent_class:
            name of the agent's agent class.

        number:
            number of agents for this class.

Accessing parameters in agents
------------------------------

Agents can only access the parameters in the __init__ method.
You can store parameter separately or store all of them:

storing single parametern::

 class Firm(abceagent.Agent, abceagent.Firm):
    def __init__(self, simulation_parameters, agent_parameters, _pass_to_engine):
        abceagent.Agent.__init__(self, *_pass_to_engine)

        self.sector = agents_pameters['sector']
        # saves the value or string from the column sector, for this class of agents

        self.gravity = simulation_parameters['gravity']
        # saves the simulation parameter gravity

        self.num_households = simulation_parameters['num_household']
        # saves the auto generated number of agents of the type household

As you can see above there is an **autogenerated simulation parameter 'num_agent_class'**
for every agent class that is created.

You can also store all parameters as dictionary, but that is not recommended::

    def __init__(self, simulation_parameters, agent_parameters, _pass_to_engine):
        abceagent.Agent.__init__(self, *_pass_to_engine)
        self.simulation_parameters = simulation_parameters
        self.agent_parameters = agent_parameters
        print(simulation_parameters)
